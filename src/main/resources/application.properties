spring.application.name=springbackend

# --- Ohio Broker 접속 설정 (동적 SCRAM 방식) ---
spring.kafka.bootstrap-servers=${OHIO_KAFKA_BOOTSTRAP_SERVERS}
spring.kafka.properties.security.protocol=SASL_PLAINTEXT
spring.kafka.properties.sasl.mechanism=SCRAM-SHA-512
# spring.kafka.properties.sasl.jaas.config는 동적으로 설정됩니다.

# --- Schema Registry 설정 ---


schema-registry.url=${SCHEMA_REGISTRY_URL}
schema-registry.basic-auth-user-info=${SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO}
schema-registry.basic-auth-credentials-source=${SCHEMA_REGISTRY_BASIC_AUTH_CRED_SOURCE}

# --- Kafka 연결 타임아웃 설정 ---
spring.kafka.admin.properties.request.timeout.ms=30000
spring.kafka.admin.properties.connections.max.idle.ms=30000
spring.kafka.admin.properties.metadata.max.age.ms=30000
spring.kafka.admin.properties.retries=3
spring.kafka.admin.properties.retry.backoff.ms=1000

# Consumer 설정
# 어떤 Consumer 그룹에 속할지 ID를 지정 + random.uuid로 계속 변경
spring.kafka.consumer.group-id=${CONSUMER_GROUP_ID}

# 값 직렬화/역직렬화(Kafka에 저장 된 데이터가 어떤 데이터인지 알려줌)
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# 스프링의 전역 KafkaListener 자동 시작 비활성화 (사용자별 Consumer만 사용)
spring.kafka.listener.auto-startup=false

# SSE 관련 설정
spring.mvc.async.request-timeout=300000
spring.mvc.async.request-timeout-unit=MILLISECONDS

## --- JWT 설정 ---
jwt.secret=R3A0a3oPGI4qTYn7YTY1yC3X7xvQKZ8o+2Q8mU0lpM3eT+gvk9H+O5J1Yw9XjPjEfLWhF6QjvHqkUhH6a9d83kM2LbxYkqYrG5jC1HgFqN8=
jwt.expiration=86400000

# --- Spring Security 설정 ---
# 기본 인증 완전 비활성화 (JWT만 사용)
spring.security.user.name=
spring.security.user.password=
spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration
# 기본 인증 메시지 비활성화
logging.level.org.springframework.security=warn

# --- 로그 레벨 설정: 4개 SSE 엔드포인트 정보만 표시 ---
logging.level.root=error
logging.level.org.springframework=error
logging.level.org.springframework.web=error
logging.level.org.springframework.security=error
logging.level.org.hibernate=error
logging.level.org.apache.kafka=error
logging.level.org.apache.tomcat=error
logging.level.io.github.cdimascio.dotenv=error
logging.level.com.zaxxer.hikari=error

# 모든 서비스 로그 비활성화
logging.level.com.finalproject.springbackend=error
logging.level.com.finalproject.springbackend.service=error
logging.level.com.finalproject.springbackend.service.AuthService=error
logging.level.com.finalproject.springbackend.service.PermissionService=error
logging.level.com.finalproject.springbackend.filter=error
logging.level.com.finalproject.springbackend.aspect=error
logging.level.com.finalproject.springbackend.service.SseService=error

# 4개 SSE 엔드포인트 Controller만 INFO 레벨로 활성화
logging.level.com.finalproject.springbackend.controller.KafkaSecurityAuditLogController=info

# Consumer 로그 활성화 (메시지 수신 로그 표시)
logging.level.com.finalproject.springbackend.service.SystemLevelFalseConsumer=info
logging.level.com.finalproject.springbackend.service.ResourceLevelFalseConsumer=info
logging.level.com.finalproject.springbackend.service.CertifiedNotMoveConsumer=info
logging.level.com.finalproject.springbackend.service.Certified2TimeConsumer=info

# --- 리소스 최적화 설정 ---
# JVM 힙 메모리 최적화
spring.jvm.heap.size=512m
# Tomcat 스레드 풀 최적화
server.tomcat.threads.max=50
server.tomcat.threads.min-spare=5
server.tomcat.max-connections=200
# HTTP 연결 타임아웃 최적화
server.tomcat.connection-timeout=30000
server.tomcat.keep-alive-timeout=20000
server.tomcat.max-keep-alive-requests=100

# 배너/DevTools 등 소음 제거
spring.main.banner-mode=off
spring.devtools.add-properties=false
spring.devtools.restart.enabled=false

# 에러 스택트레이스 노출 최소화
server.error.include-stacktrace=never

########################################################################################################################
########################################################AlbertEinsKangHoon##############################################
########################################################################################################################
# JDBC 연결 (필수)
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

# PostgreSQL 방언 설정 (필수)
#spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# 테이블명에 특수문자("-")가 있어서 필수
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.jpa.properties.hibernate.globally_quoted_identifiers=false

# 커넥션 풀 최적화
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=2
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000

# JPA 최적화
spring.jpa.hibernate.ddl-auto=update
spring.jpa.open-in-view=false
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# 모니터링용 (개발/운영 환경에서 유용)
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=always

# 시간대 설정 (한국 시간)
spring.jackson.time-zone=Asia/Seoul
spring.jackson.date-format=yyyy-MM-dd'T'HH:mm:ss.SSSXXX
